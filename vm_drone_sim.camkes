/*
 * Copyright 2019, Data61, CSIRO (ABN 41 687 119 230)
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

import <std_connector.camkes>;
import <global-connectors.camkes>;

import <vm-connectors.camkes>;
import <seL4VMDTBPassthrough.idl4>;
import <Batch.idl4>;
import <PutChar.idl4>;
import <GetChar.idl4>;
import <VirtQueues.idl4>;
import <FileServerInterface.camkes>;

import <if_OS_Logger.camkes>;

//------------------------------------------
#include "system_config.h"

//----------------------------------------------------------------------
// VM - Components
//----------------------------------------------------------------------

struct vswitch_mapping {
       string mac_addr;
       int send_id;
       int recv_id;
};

#include <configurations/vm.h>
component VM {
    VM_INIT_DEF()
    attribute vswitch_mapping vswitch_layout[] = [];
    attribute string vswitch_mac_address = "";
}

import <VirtQueue/VirtQueue.camkes>;
import <FileServer/FileServer.camkes>;


//----------------------------------------------------------------------
// SerialFilter
//----------------------------------------------------------------------
 
#include "components/SerialFilter/SerialFilter.camkes"


//----------------------------------------------------------------------
// SimCoupler
//----------------------------------------------------------------------
 
#include "components/SimCoupler/SimCoupler.camkes"


//----------------------------------------------------------------------
// Ethernet NIC
//----------------------------------------------------------------------

#include "plat_nic.camkes"


//----------------------------------------------------------------------
// NIC virtio
//----------------------------------------------------------------------

#include "NIC_VirtioNetVm/NIC_VirtioNetVm.camkes"
NIC_VirtioNetVm_COMPONENT_DEFINE(VirtioNIC, NIC_DRIVER_RINGBUFFER_SIZE, recv, send, virtio_event)


/*
#include <if_OS_Nic.camkes>

component VirtioNIC {
    IF_OS_NIC_PROVIDE(nic, NIC_DRIVER_RINGBUFFER_SIZE)
    uses VirtQueueDev recv;
    uses VirtQueueDrv send;
    emits Callback self;
    consumes Callback virtio_event;
    maybe uses      if_OS_Logger logServer_rpc;
    maybe dataport  Buf          logServer_port;
}*/


//----------------------------------------------------------------------
// Network Stack - Virtionet
//----------------------------------------------------------------------
 
#include "NetworkStack_PicoTcp/camkes/NetworkStack_PicoTcp.camkes"
NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_VM,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES
)


//----------------------------------------------------------------------
// Network Stack - PX4
//----------------------------------------------------------------------

NetworkStack_PicoTcp_COMPONENT_DEFINE(
    NetworkStack_PX4,
    NIC_DRIVER_RINGBUFFER_SIZE,
    NetworkStack_PicoTcp_NO_ADDITIONAL_INTERFACES)


//----------------------------------------------------------------------
// TimeServer
//----------------------------------------------------------------------
 
#include "TimeServer/camkes/TimeServer.camkes"
TimeServer_COMPONENT_DEFINE(TimeServer)


// Platform specific Configuration
#include <plat.camkes>

assembly {
    composition {
        //----------------------------------------------------------------------
        // SerialFilter
        //----------------------------------------------------------------------
 
		component   SerialFilter          serialFilter;

        //----------------------------------------------------------------------
        // SimCoupler
        //----------------------------------------------------------------------
 

        component   SimCoupler            simCoupler;
        
        //----------------------------------------------------------------------
        // VM
    	//----------------------------------------------------------------------
		component FileServer fileServer;

        component VM vm0;
        connection seL4VMDTBPassthrough vm0_dtb(
            from vm0.dtb_self,
            to   vm0.dtb
        );
        connection seL4GlobalAsynch vm0_notify_ready(
            from vm0.notification_ready_connector,
            to   vm0.notification_ready
        );
        connection seL4RPCDataport vm0_fs(
            from vm0.fs,
            to   fileServer.fs_ctrl
        );

        //----------------------------------------------------------------------
        // Network Drivers - NIC
        //----------------------------------------------------------------------
        
        component VirtioNIC virtioNIC;

        PLAT_NIC_INSTANCE(platNIC)

        //----------------------------------------------------------------------
        // VirtQueues
        //----------------------------------------------------------------------
        
        component VirtQueueInit virtio_vqinit0;
        component VirtQueueInit virtio_vqinit1;

        connection seL4VirtQueues virtio_virtq_conn0(
            to virtio_vqinit0.init,
            from virtioNIC.send,
            from vm0.recv
        );
        connection seL4VirtQueues virtio_virtq_conn1(
            to virtio_vqinit1.init,
            from virtioNIC.recv,
            from vm0.send
        );
        connection seL4GlobalAsynchCallback virtio_global_callback(
            from virtioNIC.self,
            to virtioNIC.virtio_event
        );

		//----------------------------------------------------------------------
        // Network Stack - Virtionet
        //----------------------------------------------------------------------
        component NetworkStack_VM    nwStack_VM;
 
        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack_VM,
            virtioNIC
        )

        
		NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack_VM,
            serialFilter,   socket_VM_nws,
            simCoupler,     socket_VM_nws
        )

		//----------------------------------------------------------------------
        // Network Stack - Px4
        //----------------------------------------------------------------------
        component NetworkStack_PX4   nwStack_PX4;
 
        NetworkStack_PicoTcp_INSTANCE_CONNECT(
            nwStack_PX4,
            platNIC
        )

        
		NetworkStack_PicoTcp_INSTANCE_CONNECT_CLIENTS(
            nwStack_PX4,
            serialFilter, socket_PX4_nws,
            simCoupler, socket_PX4_nws
        )

		//----------------------------------------------------------------------
        // TimeServer
        //----------------------------------------------------------------------
        component TimeServer timeServer;
 
        TimeServer_INSTANCE_CONNECT_CLIENTS(
            timeServer,
            nwStack_VM.timeServer_rpc, nwStack_VM.timeServer_notify,
            nwStack_PX4.timeServer_rpc, nwStack_PX4.timeServer_notify
        )

    }
    configuration {

        ramDisk.storage_size = 2 * 1024 * 1024;

        fileServer.heap_size = 0x200000; // 128 KiB seems enough

        // see also plat.camkes for more config values
        vm0.num_vcpus               = 1;
        vm0.base_prio               = 103;
        vm0._priority               = 104;

        vm0.num_extra_frame_caps    = 0;
        vm0.extra_frame_map_address = 0;
        vm0.cnode_size_bits         = 23;
        vm0.simple_untyped24_pool   = 12;
        vm0.asid_pool               = true;
        vm0.global_endpoint_base    = 1 << 27;
        vm0.simple                  = true;
        vm0.sem_value               = 0;
        vm0.heap_size               = 0x300000;
        vm0.fs_shmem_size           = 0x100000;
        
        vm0.recv_id = 0;
        vm0.recv_shmem_size = 32768;
        vm0.send_id = 1;
        vm0.send_shmem_size = 32768;
        vm0.vswitch_mac_address = "02:00:00:00:AA:01";
        vm0.vswitch_layout = [{"mac_addr": "02:00:00:00:AA:02", "recv_id": 0, "send_id":1}];

        virtioNIC.recv_id = 0;
        virtioNIC.recv_shmem_size = 32768;
        virtioNIC.send_id = 1;
        virtioNIC.send_shmem_size = 32768;
        virtioNIC.vswitch_mac_address = "02:00:00:00:AA:02";

        TimeServer_CLIENT_ASSIGN_BADGES(
            PLAT_OPTIONAL_TIMESERVER_CLIENTS_NETWORK_DRIVER_BADGES(platNIC)
            nwStack_VM.timeServer_rpc,
            nwStack_PX4.timeServer_rpc
        )

        // Network stack
        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            serialFilter, socket_VM_nws,
            simCoupler, socket_VM_nws
        )

        NetworkStack_PicoTcp_CLIENT_ASSIGN_BADGES(
            serialFilter, socket_PX4_nws,
            simCoupler, socket_PX4_nws
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack_VM,
            4,
            4
        )

        NetworkStack_PicoTcp_INSTANCE_CONFIGURE_CLIENTS(
            nwStack_PX4,
            4,
            4
        )

        PLAT_NIC_CONFIG(platNIC)

        nwStack_VM.priority = 105;
        nwStack_PX4.priority = 105;
        serialFilter.priority = 105;
    }
}
